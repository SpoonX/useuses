{"name":"Useuses","tagline":"A module allowing you to use `@uses` annotations to load dependencies for your javascript files.","body":"# Useuses\r\nA module that allows you to build your project, resolving dependencies based on the `@uses` annotation.\r\n\r\n[![Build Status](https://travis-ci.org/SpoonX/useuses.png)](https://travis-ci.org/SpoonX/useuses)\r\n[![Dependency Status](https://david-dm.org/spoonx/useuses.svg)](https://david-dm.org/spoonx/useuses)\r\n[![NPM version](https://badge.fury.io/js/useuses.png)](http://badge.fury.io/js/useuses)\r\n\r\n## What?\r\nBefore I dive into the technical specifics, I'll explain what this module is all about.\r\n\r\nIn short, it allows you to annotate your files with the `@uses` annotation to specify your dependencies;\r\nwhich is convenient for the developer reading your code as he or she now knows what dependencies a file has.\r\nIt looks like this:\r\n\r\n```javascript\r\n/**\r\n * My file\r\n *\r\n * Some info about My file\r\n *\r\n * @author  RWOverdijk\r\n * @version 0.1.0\r\n * @license MIT\r\n *\r\n * @uses ./my-dependency.js\r\n * @uses ./my/other/dependency.js\r\n */\r\n // Code here...\r\n```\r\n\r\nIt's also convenient because this module will bundle all dependencies together for you.\r\nIf you'd like a more detailed explanation of this module and its benefits, you can read about it in this [blog post](http://blog.spoonx.nl/javascript-dependency-management/).\r\n\r\n## Features\r\nThis module allows you to:\r\n\r\n* Build combined dist file based on used dependencies.\r\n* Wrap the output to prevent pollution of the global scope.\r\n* Include external (third party) resources. __*New__\r\n* Aliases. __*New__\r\n* Configure custom search (include) paths. __*New__\r\n\r\n## Installation\r\nYou can install useuses using npm:\r\n\r\n**Save as dependency:**\r\n`npm install useuses --save`\r\n\r\n**Global (for the cli):**\r\n`npm install -g useuses`\r\n\r\n## Usage\r\nThis module can be used in a programmatic manner, or via the command line.\r\n\r\n### CLI\r\nThis example assumes you have useuses installed globally.\r\nIf that's not the case, simply replace `useuses` with `./node_modules/useuses/bin/useuses.js`.\r\n\r\n`useuses -i example/main.js -o example/dist/built.js -w`\r\n\r\nAll available options can be found further down this document.\r\n\r\n### Programmatic\r\nBelow is an example on how to use Useuses.\r\n\r\n```javascript\r\nvar Useuses = require('useuses'),\r\n    useuses,\r\n    options;\r\n\r\noptions = {\r\n  in     : 'example/main.js',\r\n  out    : 'example/dist/built.js',\r\n  wrap   : true,\r\n  verbose: true,\r\n  aliases: {foo: 'bar/baz/bat'},\r\n  search : ['bower_components']\r\n};\r\n\r\nuseuses = new Useuses(options);\r\n\r\nuseuses.compile(function (error, assembled) {\r\n  if (error) {\r\n    return console.error(error);\r\n  }\r\n\r\n  console.log('Yay! The build succeeded. The files included in the build are:', assembled);\r\n});\r\n```\r\n\r\nAll available options can be found further down this document.\r\n\r\n## Options\r\nThe following options are currently available for useuses.\r\n\r\n### In (--in, -i)\r\nUse this option to tell useuses where the main project file is located.\r\n\r\n### Out (--out, -o)\r\nUsing this option you can tell useuses where to write the built file to.\r\n\r\n### Verbose (--verbose, -v)\r\nWhen supplied, useuses will output the files written to the build.\r\n\r\n### Tolerant (--tolerant, -t)\r\nWhen supplied, useuses will not stop on missing dependencies.\r\n\r\n### DryRun (--dry-run, -d)\r\nWhen supplied, useuses won't write the actual build.\r\nIn stead, it will output a list of files that _would_ have been written if this weren't a dry-run.\r\n\r\n**Note:** Programmatically, the key for this option is `dryRun`.\r\n\r\n### Aliases (--alias, -a)\r\nWith this option you can set up aliases for your dependencies.\r\nThis is particularly useful with external resources or vendor (lib) files.\r\n\r\nExample:\r\n\r\n`-a angular=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.0/angular.min.js`\r\n\r\nNow you can just use `@uses angular` to specify you're using angular, and it will be downloaded and added to the build.\r\n\r\nUsing aliases can also be useful to specify alias paths.\r\n\r\nFor instance, creating alias `-a namespace/core=library/namespace/src/core` would allow you to get rid of the lengthy @uses.\r\nYou can now just specify `namespace/core/array-utilities.js` as a dependency.\r\n\r\nYou can supply multiple `-a` options, or an array separated string of assignments.\r\n\r\nExample:\r\n\r\n`-a vendor=vendor/bower_components,angular=library/angular/angular.js`\r\n\r\n**Note:** Programmatically, the key for this option is `aliases`.\r\nAn object where the key is the alias, and the value is what the alias links to.\r\n\r\n### Search (--search, -s)\r\nThis option allows you to specify custom search paths; places for the module to look for your dependencies.\r\n\r\nExample:\r\n\r\n`useuses -i simple/main.js -o examples/simple/dist/built.js -s examples -w`\r\n\r\nWill now find `simple/main.js` in `examples/simple/main.js` and will also use the path `examples` for nested dependencies.\r\n\r\n**Note:** Programmatically, the value for this option should be an array of paths.\r\n\r\n### Wrap (--wrap, -w)\r\nSetting this to true, will instruct useuses to wrap the built code in a self-invoking function.\r\nThe advantage here, is that your code will not pollute the global scope; but will still run.\r\n\r\nFor example, this:\r\n\r\n```javascript\r\nvar name = 'World';\r\n\r\nconsole.log('Hello ' + name);\r\n```\r\n\r\nWould become this:\r\n\r\n```javascript\r\n(function () {\r\n  var name = 'World';\r\n\r\n  console.log('Hello ' + name);\r\n})();\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}